#!/usr/bin/python

import sys
import os

EXAMPLES = ''
DOCUMENTATION = '''
---
module: swift_ring_create
version_added: "0.1"
short_description: Creates a ring.
description:
    - Creates a ring with the specified name. A ring represents a mapping between
      the names of entities stored on disk and their physical location.
options:
  name:
    description:
      - The Ring name
    required: true
    default: null
    aliases: []
  path:
    description:
      - Swift base directory
    required: false
    default: "/etc/swift"
    aliases: []
  part_power:
    description:
      - Creates ring with 2^<I(part_power)> partitions. Set this I(part_power)
        value based on the total amount of storage you expect your entire ring to use. 
    required: false
    default: "18"
    aliases: []
  replicas:
    description:
      - The value of 3 represents the number of replicas of each object
    required: false
    default: "3"
    aliases: []
  part_hours:
    description:
      - The number of hours to restrict moving a partition more than once
    required: false
    default: "1"
    aliases: []
  force:
    description:
      - Enforce ring creation
    required: false
    default: "false"
    aliases: []

examples:
    - code: 'swift_ring_create: name=account.builder path=/etc/swift part_power=18 replicas=3 part_hours=1'
      description: "Creates /etc/swift/account.builder within 262144 partitions and 3 replicas."

notes: []
requirements: []
see_also: [ "swift-ring-builder(1)" ]

author: Alexey Gladkov
'''

def main():
	module = AnsibleModule(
		argument_spec = dict(
			name       = dict(required=True,  type='str'),
			path       = dict(required=False, type='str',  default="/etc/swift"),
			part_power = dict(required=False, type='int',  default=18),
			replicas   = dict(required=False, type='int',  default=3),
			part_hours = dict(required=False, type='int',  default=1),
			force      = dict(required=False, type='bool', default=False),
		),
		supports_check_mode=True
	)

	ring_file = "{0}/{1}".format(module.params['path'], module.params['name'])

	if module.check_mode:
		module.exit_json(changed=(not os.access(ring_file, os.R_OK)))

	if os.access(ring_file, os.R_OK):
		if not module.params['force']:
			module.exit_json(changed=False)
		try:
			os.remove(ring_file)

		except OSError, e:
			module.fail_json(msg="Unable to remove previous ring: {0}: {1}".format(ring_file, e))
	try:
		(rc,out,err) = module.run_command(
			[ "swift-ring-builder", ring_file, "create",
			  str(module.params['part_power']),
			  str(module.params['replicas']),
			  str(module.params['part_hours']) ])
		if rc == 2:
			module.fail_json(msg="Unable to create ring: {0}: {1}".format(ring_file, err))
		elif rc == 1:
			module.exit_json(changed=False)

		module.exit_json(changed=True)

	except Exception, e:
		module.fail_json(msg="Unable to create ring: {0}: {1}".format(ring_file, e))

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
